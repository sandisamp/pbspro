#!/usr/bin/env python3

import argparse
import copy
import fileinput
import json
import os
import platform
import shlex
import subprocess
import sys
import time

import yaml

pbs_dirname = ''


def log_error(str_to_print):
    t = time.localtime()
    current_time = time.strftime("%H:%M:%S", t)
    print('\033[91m' + current_time + " ---> " + str_to_print + '\033[0m')


def log_info(str_to_print):
    t = time.localtime()
    current_time = time.strftime("%H:%M:%S", t)
    print('\033[1m' + current_time + " ---> " + str_to_print + '\033[0m')


def run_cmd(cmd, return_output=False):
    '''
    Run a terminal command, and if needed return output of the command.
    '''
    cmd = shlex.split(cmd)
    try:
        a = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        out, err = a.communicate()
        if a.returncode != 0:
            log_error("command failed")
            log_error(str(err))
        else:
            if return_output:
                return str(out)
    except Exception as e:
        log_error("The command failed.")
        log_error(e)


def run_docker_cmd(cmd):
    '''
    Runs a docker command and on failure redirects user to the container terminal
    '''
    cmd = "docker-compose exec pbs-build bash -c \'" + cmd + "\'"
    try:
        docker_cmd = shlex.split(cmd)
        a = subprocess.Popen(docker_cmd)
        a.communicate()
        if a.returncode != 0:
            log_error(
                "docker cmd returned with non zero exit code, redirecting you to container terminal")
            docker_cmd = shlex.split(
                "docker-compose exec pbs-build bash -c \'cd /pbssrc && /bin/bash\'")
            subprocess.run(docker_cmd)
    except Exception as e:
        log_error("Failed\n:")
        log_error(e)


def write_to_file(file_path, value):
    with open(file_path, "w+") as f:
        f.write(value)


def read_from_file(file_path):
    if not os.path.isfile(file_path):
        open(file_path, 'a').close()
    with open(file_path, 'r+') as f:
        val = f.read()
    return val


def commit_docker_image():
    '''
    Commit the docker container image with post-fix '_ci_pbs' when build dependencies
    are installed and is ready to install pbs.
    '''
    env_file = os.path.join(pbs_dirname, ".env")
    image_name = read_from_file(env_file)
    image_name = image_name.split('=')[1]
    if image_name[-7:] != '_ci_pbs':
        image_name += '_ci_pbs'
        image_name = image_name.replace(':', '_')
        try:
            build_id = 'docker-compose ps -q pbs-build'
            build_id = run_cmd(build_id, True)
            build_id = build_id.split("'")[1]
            build_id = build_id[:12]
            # shortening the build id to 12 characters as is displayed by 'docker ps'
            # unlike 'docker-compose ps'  which shows full id
            cmd = 'docker commit '+build_id+' '+image_name+':latest'
            log_info(cmd)
            run_cmd(cmd)
            bad_images = "docker images -qa -f'dangling=true'"
            bad_images = run_cmd(bad_images, True)
            if bad_images != "b''":
                bad_images = (bad_images.split("'")[1]).replace("\\n", " ")
                print("The following untagged images will be removed -> " + bad_images)
                cmd = 'docker rmi ' + bad_images
                run_cmd(cmd)
        except Exception as e:
            log_error(e)


def delete_older_image(bad_images):
    '''
    When building a newer '_ci_pbs' image this fucntion will delete any older such instance
    '''
    if bad_images[-7:] != '_ci_pbs':
        bad_images = bad_images.replace(':', '_')
        bad_images += '_ci_pbs'
    cmd = "docker images -q " + bad_images
    bad_images = run_cmd(cmd, True)
    if bad_images == "b''":
        return
    bad_images = (bad_images.split("'")[1]).replace("\\n", " ")
    log_info("The following untagged images will be removed -> " + bad_images)
    cmd = 'docker rmi ' + bad_images
    run_cmd(cmd)


def get_node_config(node_image='centos:7'):
    max_servers_needed = 1
    max_moms_needed = 1
    no_mom_on_server_flag = False
    try:
        with open('./ptl_ts_tree.json') as f:
            json_data = json.load(f)
    except:
        log_error('Could not find ptl tree json file')
    for ts in json_data.values():
        for tclist in ts['tclist'].values():
            max_moms_needed = max(
                tclist['requirements']['num_moms'], max_moms_needed)
            max_servers_needed = max(
                tclist['requirements']['num_servers'], max_servers_needed)
            no_mom_on_server_flag = tclist['requirements']['no_mom_on_server'] or no_mom_on_server_flag
    node_config = ''
    for _ in range(max_servers_needed):
        node_config = node_config+'server='+node_image+';'
    if no_mom_on_server_flag == False:
        max_moms_needed = max(max_moms_needed, max_servers_needed)
        if max_moms_needed > max_servers_needed:
            for _ in range(max_moms_needed - max_servers_needed):
                node_config = node_config+'mom='+node_image+';'
    else:
        for _ in range(max_moms_needed):
            node_config = node_config+'mom='+node_image+';'

    node_config = node_config[:-1]
    return node_config


def find_ci():
    '''
    Finds absolute path of pbs and ci
    '''
    cur_dir = os.path.dirname(os.path.abspath(__file__))
    return os.path.dirname(cur_dir)


def tail_file(build_log_path):
    with open(build_log_path, 'rb') as f:
        f.seek(-2, os.SEEK_END)
        while f.read(1) != b'\n':
            f.seek(-2, os.SEEK_CUR)
        return f.readline().decode()


def check_for_existing_image(val=''):
    '''
    This function will check whether an existing image with the
    post-fix of '_ci_pbs' exists or not for the given docker image.
    '''
    env_file = os.path.join(pbs_dirname, '.env')
    if val == '':
        val = read_from_file(env_file)
        if val != '':
            val = val.split('=')[1]
            if val[-7:] == '_ci_pbs':
                val = val[:-7][::-1].replace('_', ':', 1)[::-1]
        else:
            val = 'centos:7'
    search_str = val.replace(":", "_")
    search_str += '_ci_pbs'
    cmd = 'docker images -q ' + search_str
    search_result = run_cmd(cmd, True)
    if search_result != "b''":
        return True, search_str
    else:
        return False, val


def build_compose_file(nodes):
    if os.path.exists(os.path.join(pbs_dirname, '.docker-compose-backup.yml')) == False:
        compose_file = os.path.join(pbs_dirname, 'docker-compose.yml')
        # maintain backup of compose file
        run_cmd('cp ' + compose_file + ' .docker-compose-backup.yml')
    compose_file = os.path.join(pbs_dirname, '.docker-compose-backup.yml')
    with open(compose_file) as f:
        compose_file = yaml.load(f, Loader=yaml.FullLoader)
    service_template_prist = compose_file['services']['pbs-build']
    service_template_prist['environment'][0] = 'CLUSTER_INFO=\'' + nodes + '\''
    del compose_file['services']['pbs-build']
    count = 0
    for n in nodes.split(';'):
        service_template = copy.deepcopy(service_template_prist)
        count = count + 1
        node_val = n.split('=')[1]
        node_key = n.split('=')[0]
        node_name = node_key + '_' + \
            node_val.replace(':', '_') + '_' + str(count)
        service_template['environment'][1] = 'NODE_TYPE=\'' + node_key + '\''
        service_template['networks']['ci']['aliases'][0] = node_name
        service_template['hostname'] = node_name
        _, image_value = check_for_existing_image(node_val)
        service_template['image'] = image_value
        compose_file['services'][node_name] = service_template
    yaml.dumper.SafeDumper.ignore_aliases = lambda self, data: True
    f = open(os.path.join(pbs_dirname, 'docker-compose.yml'), 'w')
    yaml.dump(compose_file, f, default_flow_style=False,
              Dumper=yaml.dumper.SafeDumper)
    log_info("Configured nodes for ci")


def check_prerequisites():
    '''
    This function will check whether docker docker-compose commands are available
    or a container is that has pbs running.
    '''
    cmd = "where" if platform.system() == "Windows" else "which"

    try:
        subprocess.run([cmd, "docker"], stdout=subprocess.DEVNULL)
    except:
        log_error("docker not found in PATH")
        return 1

    try:
        subprocess.run([cmd, "docker-compose"], stdout=subprocess.DEVNULL)
    except:
        log_error("docker-compose not found in PATH")
        return 1

    try:
        docker_container_process = subprocess.run(
            ["docker-compose", "ps"], stdout=subprocess.PIPE)
        docker_container = str(docker_container_process.stdout)
        if docker_container.find('Up') == -1:
            log_info("No running service found")
            try:
                log_info('Attempting to start container')
                os.chdir(pbs_dirname)
                subprocess.run(["docker-compose", "down", "--remove-orphans"],
                               stdout=subprocess.DEVNULL)
                image_check, env_value = check_for_existing_image()
                if image_check == True:
                    env_file = os.path.join(pbs_dirname, '.env')
                    write_to_file(env_file, "CONTAINER_PLATFORM="+env_value)
                    subprocess.run(["docker-compose", "up", "-d"])
                    return 0
                else:
                    subprocess.run(["docker-compose", "up", "-d"])
                log_info('Waiting for container build to complete ')
                build_log_path = os.path.join(pbs_dirname, 'logs', 'build')
                log_info("Build logs can be found in " + build_log_path)
                # wait for build to complete and commit newly built container
                timer = 1
                while True:
                    time.sleep(30)
                    last_line = tail_file(build_log_path)
                    log_info("Current status ...... " + last_line)
                    if last_line.find('### First time build is complete ###') != -1:
                        log_info("build is now complete")
                        commit_docker_image()
                        return 0
                    timer += 1
                    # timeout after 60 mins
                    if timer > 120:
                        return 1
            except Exception as e:
                log_error(e)
        else:
            log_info("running container found")
            return 0
    except:
        log_error("failed to start ci services")


if __name__ == "__main__":

    ap = argparse.ArgumentParser(
        prog='ci', description='Runs the ci tool for pbs', conflict_handler='resolve')
    ap.add_argument('--configure', const='called', nargs='?',
                    help='configure pbs, defaults to \'--prefix=/opt/pbs --enable-ptl\' \n eg --configure="--enable-ptl" ')
    ap.add_argument('--make', help='run make command in pbs',
                    const='called', nargs='?')
    ap.add_argument(
        '--install', help='run install command in pbs', const='called', nargs='?')
    ap.add_argument('--test', const='called', nargs='?',
                    help='run ptl tests on pbs\n --test default will run \'smoke tag\' for ptl \n eg --test="-f functional/pbs_qmgr.py" ')
    ap.add_argument('--pbs-stop', const='called',
                    help='stops all pbs processes inside container including ptl', nargs='?')
    ap.add_argument('--run', const='called',
                    help='runs complete install and test for pbs \n eg --run="-f functional/pbs_qmgr.py"', nargs='?')
    ap.add_argument('--start', const='called',
                    help='start container, optionally add platform name \n ex --start="ubuntu" ', nargs='?')
    ap.add_argument('--nodes', const='called', nargs='?',
                    help='define the nodes for ci in a "server=name;mom=name" manner for ex "server=centos:7;mom=ubuntu:16.04;mom=ubuntu:18.04"')
    ap.add_argument('--build', const='called',
                    help='forces the container to build dependencies, use as a suboption to --start', nargs='?')
    ap.add_argument('--delete', const='called',
                    help='destroy pbs container', nargs='?')
    ap.add_argument('--local', const='called',
                    help='Simply run the travis script locally, without spawning any containers', nargs='?')
    ap.add_argument('--pbs-dir', const='called',
                    help='provide directory location for pbs for which you want ci to run', nargs='?')
    if len(sys.argv) < 2:
        log_error('\nToo few arguments\n')
        ap.print_help()
        sys.exit(1)
    args = ap.parse_args(sys.argv[1:])
    if args.pbs_dir != None:
        pbs_dirname = os.path.join(args.pbs_dir, 'ci')
    else:
        pbs_dirname = find_ci()
        pbs_dirname = os.path.join(pbs_dirname, 'ci')
    try:
        os.chdir(pbs_dirname)
    except Exception as e:
        log_error(str(e))
        log_error("Was correct pbs path provided?")
        sys.exit(1)
    build_log_path = os.path.join(pbs_dirname, 'logs', 'build')
    if args.delete == None and args.start == None and args.local == None and args.nodes == None:
        ret = check_prerequisites()
        if ret == 1:
            log_error(
                "container build failed, build logs can be found in " + build_log_path)
            sys.exit(1)

    try:
        if args.nodes != None:
            build_compose_file(args.nodes)
        if args.configure != None:
            val = args.configure
            write = True
            configure_opt = os.path.join(pbs_dirname, '.configure_opt')
            if val == 'called':
                val = read_from_file(configure_opt)
                if val == '':
                    val = '--prefix=/opt/pbs --enable-ptl'
                else:
                    write = False
            log_info("using configure parameters : " + val)
            if write:
                write_to_file(configure_opt, val)
            cmd = 'export ONLY_CONFIGURE=1 && /src/do.sh | tee /logs/build '
            run_docker_cmd(cmd)
            log_info("config options set")
        if args.make == 'called':
            cmd = 'export ONLY_REBUILD=1 && /src/do.sh | tee /logs/build'
            run_docker_cmd(cmd)
            log_info(" done make ")
        if args.install == 'called':
            cmd = 'export ONLY_INSTALL=1 && /src/do.sh | tee /logs/build'
            run_docker_cmd(cmd)
            log_info(" done install ")
        if args.test != None:
            val = args.test
            write = True
            benchpress_opt = os.path.join(pbs_dirname, '.benchpress_opt')
            if val == 'called':
                val = read_from_file(benchpress_opt)
                if val == '':
                    val = '--tags=smoke'
                else:
                    write = False
            log_info("using test parameters : " + val)
            if write:
                write_to_file(benchpress_opt, val)
            cmd = 'export RUN_TESTS=1 && export ONLY_TEST=1 && /src/do.sh | tee /logs/build'
            run_docker_cmd(cmd)
            log_info(" done test ")
        if args.pbs_stop == 'called':
            cmd = '/src/killit.sh'
            run_docker_cmd(cmd)
            log_info(" done stop ")
        if args.run != None:
            benchpress_opt = os.path.join(pbs_dirname, '.benchpress_opt')
            write = True
            val = ''
            if args.run == 'called':
                val = read_from_file(benchpress_opt)
                if val == '':
                    val = '--tags=smoke'
                else:
                    write = False
            else:
                val = args.run
            log_info("using test parameters : " + val)
            if write:
                write_to_file(benchpress_opt, val)
            cmd = ' export RUN_TESTS=1 && /src/do.sh | tee /logs/build '
            run_docker_cmd(cmd)
            log_info(" done running all ")
        if args.start != None:
            env_file = os.path.join(pbs_dirname, ".env")
            if args.start == 'called':
                val = read_from_file(env_file)
                if val != '':
                    val = val.split('=')[1]
                else:
                    val = 'centos:7'
            else:
                val = args.start
            write_to_file(env_file, "CONTAINER_PLATFORM="+val)
            if args.build != None:
                delete_older_image(val)
                if val[-7:] == '_ci_pbs':
                    # remove '_ci_pbs' from string and replace '_' to ':'
                    # this will make it an image recognized by docker hub
                    val = val[:-7][::-1].replace('_', ':', 1)[::-1]
                    write_to_file(env_file, "CONTAINER_PLATFORM="+val)
            ret = check_prerequisites()
            if ret == 1:
                log_error(
                    "container build failed, take a look at logs " + build_log_path)
                sys.exit(1)
            log_info(" done start container ")
        if args.delete != None:
            try:
                os.chdir(pbs_dirname)
                run_cmd("docker-compose down --remove-orphans")
                log_info(
                    "done delete container and services")
            except Exception as e:
                log_error("Failed to destroy container and services: " + e)
        if args.local != None:
            os.chdir(pbs_dirname)
            # using subprocess.run instead of run_cmd function so we dont supress stdout and stderr
            if args.local == 'called':
                exit_code = subprocess.run("./do.sh")
                sys.exit(exit_code.returncode)
            if args.local == 'sanitize':
                exit_code = subprocess.run("./do_sanitize_mode.sh")
                sys.exit(exit_code.returncode)
        else:
            sys.exit(0)
    except Exception as e:
        ap.print_help()
        log_error(e)
